import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.awt.image.BufferedImage;
import java.util.*;
import javax.imageio.ImageIO;

public class CBIR {
	private String queryFile = "./QueryImages.txt";
	private String allImgFile = "./AllImages.txt";
	private static String ans_file = "./";
	private double dis_L2(double[] a, double[] b, int len) {
		double sum = 0;
		for(int i = 0; i < len; i ++) {
			sum = sum + Math.pow(a[i] - b[i], 2.0);
		}
		double ret = Math.sqrt(sum);
		return ret;
	}
	
	private double dis_HI(double[] a, double[] b, int len) {
		double sum = 0;
		for(int i = 0; i < len; i ++) {
			sum = sum + Math.min(a[i], b[i]);
		}
		return sum;
	}
	
	private double dis_bh(double[] a, double[] b, int len) {
		double sum = 0;
		for(int i = 0; i < len; i++) {
			sum = sum + Math.sqrt(a[i] * b[i]);
		}
		if(1 - sum >= 0) {
			return Math.sqrt(1 - sum);
		} else {
			return 0;
		}
	}
	
	private double dis_ch(double[] a, double[] b, int len) {
		double sum = 0;
		for(int i = 0; i < len; i++) {
			sum = sum + Math.pow(a[i] - b[i], 2) / (a[i] + b[i]);
		}
		return sum;
	}
	
	private double[] getBins(String path, int flag) {
		File file = new File(path);
		BufferedImage img = null;
		double bins[] = null;
		if(flag == 16) {
			bins = new double[16];
			for(int i = 0; i < 16; i++) {
				bins[i] = 0;
			}
		} else {
			bins = new double[128];
			for(int i = 0; i < 128; i++) {
				bins[i] = 0;
			}
		}
		try {
			img = ImageIO.read(file);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		int row_len = img.getWidth();
		int col_len = img.getHeight();
		int size = row_len * col_len;
		for(int i = 0; i < row_len; i++) {
			for(int j = 0; j < col_len; j++) {
				int color = img.getRGB(i, j);
				int red = color >> 16 & 0xff;
				int green = color >> 8 & 0xff;
				int blue = color & 0xff;
				if(flag == 16) {
					red = red / 128;
					green = green / 64;
					blue = blue / 128;
					bins[red + 2 * green + 2 * 4 * blue] += 1;
				} else {
					red = red / 64;
					green = green / 32;
					blue = blue / 64;
					bins[red + 4 * green + 4 * 8 * blue] += 1;
				}
			}
		}
		
		for(int i = 0; i < flag; i ++) {
			bins[i] = bins[i] / size;
		}
		return bins;
	}
	
	
	public static void main(String args[]) {
		String ans16File = ans_file + "16bins/";
		String ans128File = ans_file + "128bins/";
	}
}
